<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/styles/style.css" />
    <title>
      <%= character === 'maid' ? '메이드와 대화' : '브라운 박사님과 대화' %>
    </title>
    <script>
      // 각 캐릭터의 툴팁 텍스트 배열
      const yujiTooltip = [
        "웹프로그래밍!",
        "기말프로젝트",
        "가상의 인물과 대화하기",
      ];
      const mahiruTooltip = [
        "뭐든 시켜만 주세요",
        "빤히 쳐다보지 말아주세요",
        "필요한게 있으신가요?",
      ];
      const brownTooltip = [
        "뭐든지 물어보렴",
        "그렇네, 네가 정말 잘 하고 있어!",
        "실수는 누구나 하는 거야, 중요한 건 배움이지",
      ];

      // 대화 내용을 저장할 배열
      let conversation = [];
      const character = "<%= character %>";

      // 서버에서 특정 캐릭터의 대화 내용을 가져오는 함수
      async function fetchConversations() {
        try {
          const response = await fetch(`/conversations/${character}`);
          const data = await response.json();
          conversation = data.conversations;
          updateConversation();
        } catch (error) {
          console.error("에러:", error);
          alert("대화 내용을 가져오는 데 실패했습니다.");
        }
      }

      // 서버에 메시지를 보내고 대화 내용을 갱신하는 함수
      async function sendMessage() {
        const messageInput = document.getElementById("message");
        const message = messageInput.value;

        if (!message) return;

        try {
          const response = await fetch(`/chat/${character}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ message }),
          });

          const data = await response.json();
          conversation = data.conversations;
          updateConversation();
        } catch (error) {
          console.error("에러:", error);
          alert("메시지 전송 중 문제가 발생했습니다.");
        } finally {
          messageInput.value = "";
        }
      }

      // 서버에서 특정 캐릭터의 대화 내용을 삭제하는 함수
      async function deleteConversations() {
        try {
          const response = await fetch(`/conversations/${character}`, {
            method: "DELETE",
          });

          const data = await response.json();
          if (data.success) {
            conversation = [];
            updateConversation();
          } else {
            alert("대화 삭제에 실패했습니다.");
          }
        } catch (error) {
          console.error("에러:", error);
          alert("대화 삭제 중 문제가 발생했습니다.");
        }
      }

      // 대화 내용을 화면에 업데이트하는 함수
      function updateConversation() {
        const conversationElement = document.getElementById("conversation");
        conversationElement.innerHTML = conversation
          .map((entry) => {
            const roleClass = entry.role === "user" ? "user" : "assistant";
            return `<div class="message ${roleClass}"><p><strong>${
              entry.role === "user"
                ? "나"
                : character === "maid"
                ? "메이드"
                : "박사님"
            }:</strong> ${entry.content}</p></div>`;
          })
          .join("");
        conversationElement.scrollTop = conversationElement.scrollHeight;

        // 박사님 캐릭터일 경우 스타일 변경
        if (character === "doctor") {
          document
            .querySelectorAll(".message.assistant p")
            .forEach((element) => {
              element.classList.add("doctor-style");
            });
        }
      }

      // 툴팁 배열에서 랜덤하게 툴팁을 선택하는 함수
      function getRandomTooltip(tooltips) {
        return tooltips[Math.floor(Math.random() * tooltips.length)];
      }

      // 이미지에 툴팁 이벤트 리스너를 추가하는 함수
      function addTooltipEventListeners() {
        const yujiImage = document.getElementById("yuji-image");
        const yujiTooltipElement = document.getElementById("yuji-tooltip");

        yujiImage.addEventListener("mouseover", () => {
          yujiTooltipElement.textContent = getRandomTooltip(yujiTooltip);
        });

        if (character === "maid") {
          const mahiruImage = document.getElementById("mahiru-image");
          const mahiruTooltipElement =
            document.getElementById("mahiru-tooltip");

          mahiruImage.addEventListener("mouseover", () => {
            mahiruTooltipElement.textContent = getRandomTooltip(mahiruTooltip);
          });
        } else {
          const brownImage = document.getElementById("brown-image");
          const brownTooltipElement = document.getElementById("brown-tooltip");

          brownImage.addEventListener("mouseover", () => {
            brownTooltipElement.textContent = getRandomTooltip(brownTooltip);
          });
        }
      }

      document.addEventListener("DOMContentLoaded", () => {
        fetchConversations();
        addTooltipEventListeners();

        const sendButton = document.getElementById("sendButton");
        sendButton.addEventListener("click", sendMessage);

        const deleteButton = document.getElementById("deleteButton");
        deleteButton.addEventListener("click", deleteConversations);

        const messageInput = document.getElementById("message");
        messageInput.addEventListener("keydown", (event) => {
          if (event.key === "Enter") {
            sendMessage();
          }
        });
      });
    </script>
  </head>
  <body>
    <h1>
      <%= character === 'maid' ? '메이드와 대화' : '브라운 박사님과 대화' %>
    </h1>
    <div class="switch-buttons">
      <a href="/maid">Maid</a>
      <a href="/doctor">Doctor</a>
    </div>
    <button id="deleteButton">Delete</button>
    <div class="chat-container">
      <div class="image-container">
        <img
          src="<%= character === 'maid' ? '/images/mahiru1.png' : '/images/brown1.png' %>"
          alt="Image 1"
          class="side-image"
          id="<%= character === 'maid' ? 'mahiru-image' : 'brown-image' %>"
        />
        <div
          class="tooltip"
          id="<%= character === 'maid' ? 'mahiru-tooltip' : 'brown-tooltip' %>"
        ></div>
      </div>
      <div id="conversation"></div>
      <div class="image-container">
        <img
          src="/images/yuji1.png"
          alt="Image 2"
          class="side-image"
          id="yuji-image"
        />
        <div class="tooltip" id="yuji-tooltip"></div>
      </div>
    </div>
    <div id="inputArea">
      <input type="text" id="message" placeholder="Type your message here..." />
      <button id="sendButton">Send</button>
    </div>
  </body>
</html>
